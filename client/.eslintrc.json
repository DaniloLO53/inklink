{
  "env": {
    "browser": true,
    "node": true,
    "es2021": true,
    "jest/globals": true
  },
  "settings": {
    "react": {
      "version": "detect"
    }
  },
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:jest/recommended",
    "plugin:prettier/recommended"
    // "prettier"
  ],
  "overrides": [],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true
    }
  },
  "plugins": [
    "react",
    "jest",
    "react-hooks",
    "prettier",
    "@typescript-eslint",
    "eslint-plugin-import-helpers"
  ],
  "rules": {
    "semi": ["error", "always"],
    "quotes": ["error", "double"],
    "jest/no-disabled-tests": "warn",
    "object-curly-spacing": ["error", "always"],
    "react/jsx-uses-vars": "error",
    "react/jsx-uses-react": "error",
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn",
    "react/prop-types": "off",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/no-non-null-assertion": "off",
    "@typescript-eslint/no-empty-interface": "off",
    "@typescript-eslint/ban-types": [
      "error",
      {
        "types": {
          "Boolean": {
            "message": "Avoid using the `Boolean` type. Use `boolean` instead."
          },
          "Number": {
            "message": "Avoid using the `Number` type. Use `number` instead."
          },
          "String": {
            "message": "Avoid using the `String` type. Use `string` instead."
          },
          "Symbol": {
            "message": "Avoid using the `Symbol` type. Use `symbol` instead."
          },
          "Object": {
            "message": "Avoid using the `Object` type. Use `{}` instead."
          },
          "Function": {
            "message": "Avoid using the `Function` type. Use a specific function type, like `() => void`, instead."
          }
        },
        "extendDefaults": true
      }
    ],    
    "import-helpers/order-imports": [
      "warn",
      {
        "newlinesBetween": "always",
        "groups": [
          "/react/",
          "module",
          "/^@shared/",
          "absolute",
          "/^components/",
          "/^pages/",
          "/utils/",
          "/^styles/",
          ["parent", "sibling", "index"]
        ],
        "alphabetize": { "order": "asc", "ignoreCase": true }
      }
    ],
    "prettier/prettier": "error"
  }
}
